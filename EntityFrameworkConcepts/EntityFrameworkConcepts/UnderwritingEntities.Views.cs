//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(EntityFrameworkConcepts.UnderwritingEntitiesContainer),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets5cd54b49d3262eedcf47e73f36277cb43a4725127ecd37fa8460fda5c7f5b61a))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets5cd54b49d3262eedcf47e73f36277cb43a4725127ecd37fa8460fda5c7f5b61a : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "5cd54b49d3262eedcf47e73f36277cb43a4725127ecd37fa8460fda5c7f5b61a"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "UnderwritingEntitiesStoreContainer.header")
            {
                return GetView0();
            }

            if (extentName == "UnderwritingEntitiesStoreContainer.claimHeader")
            {
                return GetView1();
            }

            if (extentName == "UnderwritingEntitiesContainer.headers")
            {
                return GetView2();
            }

            if (extentName == "UnderwritingEntitiesContainer.claimHeaders")
            {
                return GetView3();
            }

            if (extentName == "UnderwritingEntitiesContainer.FK__claimHead__heade__36B12243")
            {
                return GetView4();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for UnderwritingEntitiesStoreContainer.header.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing header
        [UnderwritingEntities.Store.header](T1.header_HeaderId, T1.header_PolicyReference)
    FROM (
        SELECT 
            T.HeaderId AS header_HeaderId, 
            T.PolicyReference AS header_PolicyReference, 
            True AS _from0
        FROM UnderwritingEntitiesContainer.headers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for UnderwritingEntitiesStoreContainer.claimHeader.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing claimHeader
        [UnderwritingEntities.Store.claimHeader](T3.claimHeader_claimheaderid, T3.claimHeader_claimreference, T3.claimHeader_headerid)
    FROM (
        SELECT T1.claimHeader_claimheaderid, T1.claimHeader_claimreference, T2.claimHeader_headerid, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.claimheaderid AS claimHeader_claimheaderid, 
                T.claimreference AS claimHeader_claimreference, 
                True AS _from0
            FROM UnderwritingEntitiesContainer.claimHeaders AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.claimHeader).claimheaderid AS claimHeader_claimheaderid, 
                Key(T.header).HeaderId AS claimHeader_headerid, 
                True AS _from1
            FROM UnderwritingEntitiesContainer.FK__claimHead__heade__36B12243 AS T) AS T2
            ON T1.claimHeader_claimheaderid = T2.claimHeader_claimheaderid
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for UnderwritingEntitiesContainer.headers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing headers
        [UnderwritingEntities.header](T1.header_PolicyReference, T1.header_HeaderId)
    FROM (
        SELECT 
            T.PolicyReference AS header_PolicyReference, 
            T.HeaderId AS header_HeaderId, 
            True AS _from0
        FROM UnderwritingEntitiesStoreContainer.header AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for UnderwritingEntitiesContainer.claimHeaders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing claimHeaders
        [UnderwritingEntities.claimHeader](T1.claimHeader_claimheaderid, T1.claimHeader_claimreference) WITH 
        RELATIONSHIP(CREATEREF(UnderwritingEntitiesContainer.headers, ROW(T1.[FK__claimHead__heade__36B12243.header.HeaderId]),[UnderwritingEntities.header]),[UnderwritingEntities.FK__claimHead__heade__36B12243],claimHeader,header) 
    FROM (
        SELECT 
            T.claimheaderid AS claimHeader_claimheaderid, 
            T.claimreference AS claimHeader_claimreference, 
            True AS _from0, 
            T.headerid AS [FK__claimHead__heade__36B12243.header.HeaderId]
        FROM UnderwritingEntitiesStoreContainer.claimHeader AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for UnderwritingEntitiesContainer.FK__claimHead__heade__36B12243.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FK__claimHead__heade__36B12243
        [UnderwritingEntities.FK__claimHead__heade__36B12243](T3.[FK__claimHead__heade__36B12243.header], T3.[FK__claimHead__heade__36B12243.claimHeader])
    FROM (
        SELECT -- Constructing header
            CreateRef(UnderwritingEntitiesContainer.headers, row(T2.[FK__claimHead__heade__36B12243.header.HeaderId]), [UnderwritingEntities.header]) AS [FK__claimHead__heade__36B12243.header], 
            T2.[FK__claimHead__heade__36B12243.claimHeader]
        FROM (
            SELECT -- Constructing claimHeader
                T1.[FK__claimHead__heade__36B12243.header.HeaderId], 
                CreateRef(UnderwritingEntitiesContainer.claimHeaders, row(T1.[FK__claimHead__heade__36B12243.claimHeader.claimheaderid]), [UnderwritingEntities.claimHeader]) AS [FK__claimHead__heade__36B12243.claimHeader]
            FROM (
                SELECT 
                    T.headerid AS [FK__claimHead__heade__36B12243.header.HeaderId], 
                    T.claimheaderid AS [FK__claimHead__heade__36B12243.claimHeader.claimheaderid], 
                    True AS _from0
                FROM UnderwritingEntitiesStoreContainer.claimHeader AS T
                WHERE T.headerid IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
